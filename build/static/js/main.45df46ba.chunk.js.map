{"version":3,"sources":["index.js"],"names":["mapboxgl","accessToken","Application","props","state","lng","lat","zoom","map","Map","container","this","mapContainer","style","center","on","setState","getCenter","toFixed","getZoom","axios","get","then","response","result","data","Agglomerations","console","log","Object","entries","e","a","covid","covid_name","papa","parse","header","skipEmptyLines","covid_latest","keys","length","csv2geojson","latfield","lonfield","delimiter","numericFields","err","covid_array","addSource","type","addLayer","filter","id","source","layout","makeGetRequest","ref","el","className","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2TAOAA,IAASC,YAAc,wF,IACjBC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,IAAK,EACLC,IAAK,EACLC,KAAM,GALS,E,gEAWE,IAAD,OACZC,EAAM,IAAIR,IAASS,IAAI,CAC3BC,UAAWC,KAAKC,aAChBC,MAAO,iDACPC,OAAQ,CAACH,KAAKP,MAAMC,IAAKM,KAAKP,MAAME,KACpCC,KAAMI,KAAKP,MAAMG,OAInBC,EAAIO,GAAG,QAAQ,WACf,EAAKC,SAAS,CACdX,IAAKG,EAAIS,YAAYZ,IAAIa,QAAQ,GACjCZ,IAAKE,EAAIS,YAAYX,IAAIY,QAAQ,GACjCX,KAAMC,EAAIW,UAAUD,QAAQ,QAKfE,IAAMC,IAAI,gBAAgBC,MAAK,SAAAC,GAC1C,IAAIC,EAASD,EAASE,KAAKC,eAAe,GAC1CC,QAAQC,IAAIC,OAAOC,QAAQN,GAAQhB,KAAI,SAAAuB,GAAC,OAAEA,SApB1B,4CA6FhB,gCAAAC,EAAA,sEACkBZ,IAAMC,IAAI,0JAD5B,OACIY,EADJ,OAGIC,EAAWC,IAAKC,MAAMH,EAAMR,KAAK,CAACY,QAAO,EAAKC,gBAAe,IAAOb,KAAK,GACzEc,EAAaV,OAAOW,KAAKN,GAAYL,OAAOW,KAAKN,GAAYO,OAAO,GACxEC,IAAYA,YAAYT,EAAMR,KAAK,CACrCkB,SAAU,MACVC,SAAU,OACVC,UAAW,IACXC,cAAcP,IAElB,SAASQ,EAAItB,GAEP,IAAIuB,EAAYvB,EAChBE,QAAQC,IAAIoB,GACdxC,EAAIO,GAAG,QAAQ,WACbP,EAAIyC,UAAU,QAAS,CACrBC,KAAM,UACNzB,KAAMuB,IAERxC,EAAI2C,SAAS,CACb,GAAM,QACN,KAAQ,SACR,OAAU,QACVC,OAAQ,CAAC,KAAM,iBAAiB,UAAU,SAAS,QAAQ,WAAW,eAAe,UAAU,aAAa,WAAW,2BAA2B,OAAO,gBAAgB,sBAAsB,mBAAmB,WAAW,QAAQ,oBAAoB,WAAW,QAAQ,SAAS,QAAQ,SAAS,gBAAgB,QAAQ,UAAU,QAAQ,aAAa,SAAS,OAAO,UAAU,aAAa,UAAU,QAAQ,UAAU,SAAS,wBAAwB,UAAU,eAAe,UAAU,eAAe,cAAc,QAAQ,WAAW,WAAW,OAAO,UAAU,SAAS,iBAAiB,SAAS,YACnlB,MAAS,CACP,eAAgB,CAClB,OACA,CAAC,MAAOb,GACR,UACA,GACA,UACA,IACA,WAEE,gBAAiB,CACnB,OACA,CAAC,MAAOA,GACR,GACA,IACA,GACA,IACA,OAKA/B,EAAI2C,SAAS,CACbE,GAAI,cACJH,KAAM,SACNI,OAAQ,QACRF,OAAQ,CAAC,KAAM,iBAAiB,UAAU,SAAS,QAAQ,WAAW,eAAe,UAAU,aAAa,WAAW,2BAA2B,OAAO,gBAAgB,sBAAsB,mBAAmB,WAAW,QAAQ,oBAAoB,WAAW,QAAQ,SAAS,QAAQ,SAAS,gBAAgB,QAAQ,UAAU,QAAQ,aAAa,SAAS,OAAO,UAAU,aAAa,UAAU,QAAQ,UAAU,SAAS,wBAAwB,UAAU,eAAe,UAAU,eAAe,cAAc,QAAQ,WAAW,WAAW,OAAO,UAAU,SAAS,iBAAiB,SAAS,YACnlBG,OAAQ,CACR,aAAc,IAAIhB,EAAa,IAC/B,YAAa,CAAC,sBAAuB,yBACrC,YAAa,YAvDb,4CA7FgB,0DA2KpBiB,K,+BAOU,IAAD,OAEP,OACE,6BACE,yBAAKC,IAAK,SAAAC,GAAE,OAAI,EAAK9C,aAAe8C,GAAIC,UAAU,sB,GAlMhCC,IAAMC,WA4MhCC,IAASC,OAAO,kBAAC7D,EAAD,MAAiB8D,SAASC,eAAe,U","file":"static/js/main.45df46ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport axios from 'axios';\r\nimport papa from 'papaparse';\r\nimport csv2geojson from 'csv2geojson'\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWttZCIsImEiOiJjajBqYjJpY2owMDE0Mndsbml0d2V1ZXczIn0.el8wQmA-TSJp2ggX8fJ1rA';\r\nclass Application extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lng: 5,\r\n      lat: 0,\r\n      zoom: 3\r\n    };\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    const map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      style: 'mapbox://styles/mkmd/ck88rk21s2ep51jpjjnyz9o3p',\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom\r\n    });\r\n\r\n\r\n    map.on('move', () => {\r\n    this.setState({\r\n    lng: map.getCenter().lng.toFixed(4),\r\n    lat: map.getCenter().lat.toFixed(4),\r\n    zoom: map.getZoom().toFixed(2)\r\n    });\r\n    });\r\n\r\n    //.map(e => e.join(\",\")).join(\"\\n\")\r\n    let agglos = axios.get('senegal.json').then(response=>{\r\n      let result = response.data.Agglomerations[\"0\"]\r\n      console.log(Object.entries(result).map(e=>e))\r\n\r\n\r\n  });\r\n    //console.log(agglos)\r\n    //let data = agglos.data.Agglomerations[0].Longlat;\r\n    //var marker = new mapboxgl.Marker();\r\n\r\n    // map.on('load', function() {\r\n    // // Add a source for the state polygons.\r\n    // map.addSource('states', {\r\n    // 'type': 'geojson',\r\n    // 'data':\r\n    // 'https://gist.githubusercontent.com/mkmdivy/044d7f9f13cc2ec22ba6b1751c3527a6/raw/9908322b5ac7915720fc98190f755f139bde8ff3/africa'\r\n    // });\r\n    //\r\n    // // Add a layer showing the state polygons.\r\n    // map.addLayer({\r\n    // 'id': 'NAME_EN',\r\n    // 'type': 'fill',\r\n    // 'source': 'states',\r\n    // 'paint': {\r\n    // 'fill-color': 'rgba(200, 100, 240, 0.4)',\r\n    // 'fill-outline-color': 'rgba(200, 100, 240, 1)'\r\n    // }\r\n    // });\r\n    //\r\n    // // When a click event occurs on a feature in the states layer, open a popup at the\r\n    // // location of the click, with description HTML from its properties.\r\n    // map.on('click', 'NAME_EN', function(e) {\r\n    // new mapboxgl.Popup()\r\n    // .setLngLat(e.lngLat)\r\n    // .setHTML(e.features[0].properties.NAME_EN)\r\n    // .addTo(map);\r\n    // makeGetRequest(e.features[0].properties.NAME_EN,1)\r\n    // });\r\n    //\r\n    // // Change the cursor to a pointer when the mouse is over the states layer.\r\n    // map.on('mouseenter', 'NAME_EN', function() {\r\n    // map.getCanvas().style.cursor = 'pointer';\r\n    // });\r\n    //\r\n    // // Change it back to a pointer when it leaves.\r\n    // map.on('mouseleave', 'NAME_EN', function() {\r\n    // map.getCanvas().style.cursor = '';\r\n    // });\r\n    // });\r\n\r\n\r\n\r\n    // /////// ******Add Africapolis\r\n    // map.on('load', function() {\r\n    //   // Add a circle layer with a vector source.\r\n    //   map.addLayer({\r\n    //     id: 'points-of-interest',\r\n    //     source: {\r\n    //       type: 'vector',\r\n    //       url: 'mapbox://mkmd.ck5qy6ole1xja2npflwvfk78l-2j015'\r\n    //     },\r\n    //     'source-layer': 'metropole',\r\n    //     type: 'circle',\r\n    //     paint: {\r\n    //       // Mapbox Style Specification paint properties\r\n    //     },\r\n    //     layout: {\r\n    //       // Mapbox Style Specification layout properties\r\n    //     }\r\n    //   });\r\n    //\r\n    // });\r\n\r\n    //axios.get('chad.json').then(response=>{console.log(response.data.Agglomerations[0].Longlat)})\r\n    //mkmd.ck5qy6ole1xja2npflwvfk78l-2j015\r\n      async function makeGetRequest() {\r\n      let covid = await axios.get('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')\r\n      //console.log(covid.data)\r\n      let covid_name=papa.parse(covid.data,{header:true,skipEmptyLines:true}).data[\"0\"];\r\n      let covid_latest=Object.keys(covid_name)[Object.keys(covid_name).length-1]\r\n      csv2geojson.csv2geojson(covid.data,{\r\n    latfield: 'Lat',\r\n    lonfield: 'Long',\r\n    delimiter: ',',\r\n    numericFields:covid_latest\r\n},\r\nfunction(err,data){\r\n  //let covid_latest=Object.keys(data.features[0].properties)[Object.keys(data.features[0].properties).length-1]\r\n      let covid_array=data\r\n      console.log(covid_array)\r\n    map.on('load', function() {\r\n      map.addSource('covid', {\r\n        type: 'geojson',\r\n        data: covid_array\r\n      });\r\n      map.addLayer({\r\n      'id': 'covid',\r\n      'type': 'circle',\r\n      'source': 'covid',\r\n      filter: ['in', 'Country/Region',\"Algeria\",\"Angola\",\"Benin\",\"Botswana\",\"Burkina Faso\",\"Burundi\",\"Cabo Verde\",\"Cameroon\",\"Central African Republic\",\"Chad\",\"Cote d'Ivoire\",\"Congo (Brazzaville)\",\"Congo (Kinshasa)\",\"Djibouti\",\"Egypt\",\"Equatorial Guinea\",\"Ethiopia\",\"Gabon\",\"Gambia\",\"Ghana\",\"Guinea\",\"Guinea-Bissau\",\"Kenya\",\"Liberia\",\"Libya\",\"Madagascar\",\"Malawi\",\"Mali\",\"Morocco\",\"Mozambique\",\"Namibia\",\"Niger\",\"Nigeria\",\"Rwanda\",\"Sao Tome and Principe\",\"Senegal\",\"Sierra Leone\",\"Somalia\",\"South Africa\",\"South Sudan\",\"Sudan\",\"Eswatini\",\"Tanzania\",\"Togo\",\"Tunisia\",\"Uganda\",\"Western Sahara\",\"Zambia\",\"Zimbabwe\"],\r\n      'paint': {\r\n        'circle-color': [\r\n      'step',\r\n      ['get', covid_latest],\r\n      '#51bbd6',\r\n      30,\r\n      '#f1f075',\r\n      100,\r\n      '#f28cb1'\r\n      ],\r\n        'circle-radius': [\r\n      'step',\r\n      ['get', covid_latest],\r\n      20,\r\n      100,\r\n      30,\r\n      750,\r\n      40\r\n      ]\r\n      }\r\n      });\r\n\r\n      map.addLayer({\r\n      id: 'covid-count',\r\n      type: 'symbol',\r\n      source: 'covid',\r\n      filter: ['in', 'Country/Region',\"Algeria\",\"Angola\",\"Benin\",\"Botswana\",\"Burkina Faso\",\"Burundi\",\"Cabo Verde\",\"Cameroon\",\"Central African Republic\",\"Chad\",\"Cote d'Ivoire\",\"Congo (Brazzaville)\",\"Congo (Kinshasa)\",\"Djibouti\",\"Egypt\",\"Equatorial Guinea\",\"Ethiopia\",\"Gabon\",\"Gambia\",\"Ghana\",\"Guinea\",\"Guinea-Bissau\",\"Kenya\",\"Liberia\",\"Libya\",\"Madagascar\",\"Malawi\",\"Mali\",\"Morocco\",\"Mozambique\",\"Namibia\",\"Niger\",\"Nigeria\",\"Rwanda\",\"Sao Tome and Principe\",\"Senegal\",\"Sierra Leone\",\"Somalia\",\"South Africa\",\"South Sudan\",\"Sudan\",\"Eswatini\",\"Tanzania\",\"Togo\",\"Tunisia\",\"Uganda\",\"Western Sahara\",\"Zambia\",\"Zimbabwe\"],\r\n      layout: {\r\n      'text-field': \"{\"+covid_latest+\"}\",\r\n      'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\r\n      'text-size': 12\r\n      }\r\n      });\r\n        //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\r\n      });\r\n    });\r\n\r\n      //let covid_array= papa.parse(covid.data,{header:true,skipEmptyLines:true}).data;\r\n      //var x;\r\n      //for (x in [3,5,25,32,33,35,47,48,84,85,87,96,99,101,104,105,118,119,122,125,143,149,153,157,164,165,173,174,189,194,200,201,204,209,211,213,215,230,231,235,241,243,244,254,255,256,258,261,262,263]){new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map)\r\n        //new mapboxgl.Marker().setLngLat([covid_array[x].Long,covid_array[x].Lat]).addTo(map);\r\n      //}\r\n\r\n\r\n      //let res = await axios.get(country+'.json');\r\n      //console.log(res.data.Agglomerations);\r\n      //let data = res.data.Agglomerations[select].Longlat;\r\n\r\n      //new mapboxgl.Marker().setLngLat(data).addTo(map);\r\n      //marker.setLngLat(data)\r\n      //marker.addTo(map);\r\n    }\r\n\r\n  makeGetRequest()\r\n    //let agglos = axios.get('egypt.json');\r\n    //console.log(agglos)\r\n    //let data = agglos.data.Agglomerations[0].Longlat;\r\n    //var marker = new mapboxgl.Marker();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nReactDOM.render(<Application />, document.getElementById('app'));\r\n"],"sourceRoot":""}